{
  "inventory_date": "2025-02-01",
  "scan_scope": "a-player-dashboard/src/**",
  "analysis_summary": {
    "total_queries": 95,
    "tables_accessed": 31,
    "rpc_calls": 1,
    "direct_rest_calls": 0,
    "company_id_usage": "partial"
  },
  "supabase_client_patterns": {
    "auth_usage": [
      {
        "file": "src/services/supabase.ts",
        "line": 25,
        "pattern": "createClient(SUPABASE_CONFIG.URL, SUPABASE_CONFIG.ANON_KEY)",
        "client_type": "anon_key",
        "issues": ["ANON_KEY hardcoded in config - potential security risk"]
      },
      {
        "file": "src/services/authService.ts",
        "lines": [41, 115, 384, 540, 548],
        "patterns": [
          "supabase.auth.signInWithPassword",
          "supabase.auth.signOut",
          "supabase.auth.onAuthStateChange",
          "supabase.auth.getSession",
          "supabase.auth.refreshSession"
        ],
        "client_type": "anon_key",
        "issues": []
      }
    ],
    "table_access_patterns": [
      {
        "table": "people",
        "file": "src/services/dataFetching.ts",
        "operations": [
          {
            "line": 21,
            "operation": "select",
            "query": ".from('people').select('*').eq('active', true)",
            "company_id_binding": "MISSING",
            "issue": "No company_id filter - potential cross-tenant data leak"
          },
          {
            "line": 717,
            "operation": "update",
            "query": ".from('people').update({ company_id: defaultCompany.id }).eq('email', userEmail)",
            "company_id_binding": "SET_IN_PAYLOAD",
            "issue": "None - properly setting company_id"
          }
        ]
      },
      {
        "table": "company_memberships",
        "file": "src/services/dataFetching.ts",
        "operations": [
          {
            "line": 731,
            "operation": "upsert",
            "query": ".from('company_memberships').upsert({ person_id: person.id, company_id: defaultCompany.id, role: 'member' })",
            "company_id_binding": "SET_IN_PAYLOAD",
            "issue": "Uses person_id instead of profile_id - may conflict with RLS policies"
          }
        ]
      },
      {
        "table": "evaluation_cycles",
        "file": "src/services/dataFetching.ts",
        "operations": [
          {
            "line": 66,
            "operation": "select",
            "query": ".from('evaluation_cycles').select('*').order('start_date', { ascending: false })",
            "company_id_binding": "MISSING",
            "issue": "No company_id filter - may return all quarters across tenants"
          }
        ]
      },
      {
        "table": "weighted_evaluation_scores",
        "file": "src/services/dataFetching.ts",
        "operations": [
          {
            "line": 92,
            "operation": "select",
            "query": ".from('weighted_evaluation_scores').select('*').eq('evaluatee_id', employeeId)",
            "company_id_binding": "IMPLICIT_VIA_RLS",
            "issue": "Relies on RLS policies - could fail silently with empty results"
          }
        ]
      },
      {
        "table": "invites",
        "file": "src/components/ui/InviteManager.tsx",
        "operations": [
          {
            "line": 71,
            "operation": "select",
            "query": ".from('invites').select('id, email, role_to_assign, created_at, expires_at, claimed_at, revoked_at').eq('company_id', peopleData.company_id)",
            "company_id_binding": "EXPLICIT_FILTER",
            "issue": "None - properly filtered by company_id"
          },
          {
            "line": 159,
            "operation": "update",
            "query": ".from('invites').update({ revoked_at: new Date().toISOString() }).eq('id', inviteId)",
            "company_id_binding": "MISSING",
            "issue": "No company_id filter on update - could modify invite from different company"
          }
        ]
      },
      {
        "table": "submissions",
        "file": "src/components/ui/EvaluationSurvey.tsx",
        "operations": [
          {
            "line": 3083,
            "operation": "insert",
            "query": ".from('submissions').insert([{ submitter_id: user.id, assignment_id, submitted_at: new Date().toISOString() }])",
            "company_id_binding": "MISSING",
            "issue": "No company_id in payload - relies entirely on RLS"
          }
        ]
      },
      {
        "table": "attribute_scores",
        "file": "src/components/ui/EvaluationSurvey.tsx",
        "operations": [
          {
            "line": 3111,
            "operation": "upsert",
            "query": ".from('attribute_scores').upsert([{ submission_id: currentSubmissionId, attribute_name, score, evaluatee_id, evaluator_id, evaluation_type, quarter_id }])",
            "company_id_binding": "MISSING",
            "issue": "No company_id in payload - relies entirely on RLS"
          }
        ]
      },
      {
        "table": "employee_quarter_notes",
        "file": "src/services/dataFetching.ts",
        "operations": [
          {
            "line": 763,
            "operation": "select",
            "query": ".from('employee_quarter_notes').select('notes').eq('employee_id', employeeId).eq('quarter_id', quarterId)",
            "company_id_binding": "IMPLICIT_VIA_RLS",
            "issue": "Relies on RLS - missing explicit company_id filter"
          },
          {
            "line": 842,
            "operation": "upsert",
            "query": ".from('employee_quarter_notes').upsert({ employee_id: employeeId, quarter_id: quarterId, notes, company_id: userCompanyId })",
            "company_id_binding": "SET_IN_PAYLOAD",
            "issue": "None - properly includes company_id"
          }
        ]
      }
    ],
    "rpc_calls": [
      {
        "file": "src/services/coverageService.ts",
        "line": 75,
        "rpc_name": "get_dual_coverage_analysis",
        "parameters": { "p_company_id": "company_id" },
        "company_id_binding": "EXPLICIT_PARAMETER",
        "issue": "None - properly passes company_id parameter"
      }
    ]
  },
  "critical_findings": {
    "missing_company_id_filters": [
      "people table selects without company_id filter",
      "evaluation_cycles selects without company_id filter",
      "invites updates without company_id validation"
    ],
    "rls_dependency_risks": [
      "weighted_evaluation_scores relies on RLS policies",
      "employee_quarter_notes relies on RLS policies", 
      "submissions table has no explicit company_id",
      "attribute_scores table has no explicit company_id"
    ],
    "auth_key_issues": [
      "ANON_KEY hardcoded in config file",
      "No service role key usage detected",
      "All operations use anon key - potential privilege issues"
    ],
    "potential_cross_tenant_leaks": [
      "fetchEmployees() could return employees from all companies",
      "evaluation cycles fetched globally without tenant filter",
      "invite revocation doesn't validate company ownership"
    ]
  },
  "tables_by_company_id_usage": {
    "explicit_company_id_filter": [
      "invites (select operation)",
      "get_dual_coverage_analysis RPC"
    ],
    "company_id_in_payload": [
      "people (update operation)", 
      "company_memberships (upsert operation)",
      "employee_quarter_notes (upsert operation)"
    ],
    "missing_company_id": [
      "people (select operations)",
      "evaluation_cycles (all operations)",
      "weighted_evaluation_scores (all operations)", 
      "submissions (insert operations)",
      "attribute_scores (upsert operations)",
      "invites (update operations)"
    ],
    "rls_dependent": [
      "core_group_scores",
      "quarter_final_scores", 
      "analysis_jobs",
      "attribute_responses"
    ]
  }
}
